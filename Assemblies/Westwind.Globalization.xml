<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Globalization</name>
    </assembly>
    <members>
        <member name="T:Westwind.Globalization.DbResourceProviderFactory">
            <summary>
            Provider Factory class that needs to be set in web.config in order for ASP.NET to instantiate
            this class for all resource related tasks.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProviderFactory.CreateGlobalResourceProvider(System.String)">
            <summary>
            Core Factory method that returns an instance of our DbResourceProvider 
            database Resource provider for Global Resources. This method gets
            passed simple a ResourceSet which is equivalent to a Resource file in
            Resx and here maps to the ResourceSet id in the database.
            </summary>
            <param name="classname"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProviderFactory.CreateLocalResourceProvider(System.String)">
            <summary>
            Creates a local resource provider for a given Page or Template Resource.
            
            We'll create local resources by application relative names. This routine
            gets passed a full virtual path to the page or template control and we'll
            strip off the virtual and use only the virtual relative path. 
            
            So: /myapp/test.aspx becomes test.aspx and
                /myapp/subdir/test.aspx becomes subdir/test.aspx
            
            for our ResourceSet naming of local resources. The provider is 
            created with this ResourceSet name.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceReader">
            <summary>
            DbResourceReader is an IResourceReader for reading resources from a database.
            The ResourceReader is the actual Resource component that accesses the underlying datasource
            to retrieve the resource data. 
            
            This databased manager uses the DbResourceDataManager to query the database and retrieve
            a list of resources for a given baseName (ResourceSet) and Culture and returns that result
            as an IEnumerable list (via a HashTable). This process - other than the data access - results
            in the same structures as resources read from ResX files.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.baseNameField">
            <summary>
            Name of the ResourceSet
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.cultureInfo">
            <summary>
            The culture that applies to to this reader
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.Items">
            <summary>
            Cached instance of items. The ResourceManager will often be called repeatedly
            for the same data so this caching avoids multiple repetitive calls to the
            database.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader._SyncLock">
            <summary>
            Critcal section for loading resource items
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core constructor for DbResourceReader. This ctor is passed the name of the
            ResourceSet and a culture that is to be loaded.
            </summary>
            <param name="baseNameField">The base name of the resource reader</param>
            <param name="cultureInfo">The CultureInfo identifying the culture of the resources to be read</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.GetEnumerator">
            <summary>
            This is the worker method responsible for actually retrieving resources from the resource
            store. This method goes out queries the database by asking for a specific ResourceSet and 
            Culture and it returns a Hashtable (as IEnumerable) to use as a ResourceSet.
            
            The ResourceSet manages access to resources via IEnumerable access which is ultimately used
            to return resources to the front end.
            
            Resources are read once and cached into an internal Items field. A ResourceReader instance
            is specific to a ResourceSet and Culture combination so there should never be a need to
            reload this data, except when explicitly clearing the reader/resourceset (in which case
            Items can be set to null via ClearResources()).
            </summary>
            <returns>An IDictionaryEnumerator of the resources for this reader</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator of the resources for this reader. Simply returns 
            the IDictionary enumerator from the overload.
            </summary>
            <returns>An IEnumerator of the resources for this reader</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.Close">
            <summary>
            Closes the resource reader after releasing any resources associated with it
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.Dispose">
            <summary>
            Releases all resources used by the object. Ultimately this is called
            by ResourceManager.ReleaseAllResources which calls on the ResourceSet
            and then down into the reader to close its resources. 
            
            This code cleans up the internally created dictionary which in turn
            comes from a Hashtable.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceSet">
            <summary>
            DbResourceSet is the ResourceSet implementation for the database driven
            Resource manager. A ResourceSet is a IEnumerable list of all resources
            in set for a given specific culture. Each culture has a separate resource
            set. The ResourceManager caches the InternalResourceSets and figures out how to
            return the resources from this ResourceSet using the IEnumerable interface.
            
            The ResourceSet doesn't do any work - it serves merely as a coordinator. The
            actual reading of resources is managed by the ResourceReader which eventually
            calls into the database to retrieve the resources for the ResourceSet.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core constructore. Gets passed a baseName (which is the ResourceSet Id - 
            either a local or global resource group) and a culture. 
            
            This constructor basically creates a new ResourceReader and uses that
            reader's IEnumerable interface to provide access to the underlying
            resource data.
            </summary>
            <param name="baseName"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.GetDefaultReader">
            <summary>
            Marker method that provides the type used for the ResourceReader.
            Not used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.GetDefaultWriter">
            <summary>
            Marker method that provides the type used for a ResourceWriter.
            Not used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceWriter">
            <summary>
            DbResourceWriter is an IResourceWriter for writing resources to a database
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceWriter.resourceList">
            <summary>
            List of resources we want to add
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Constructs a DbResourceWriter object
            </summary>
            <param name="baseNameField">The base name of the resource writer</param>
            <param name="cultureInfo">The CultureInfo identifying the culture of the resources to be written</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.#ctor(System.Resources.IResourceReader,System.String,System.Globalization.CultureInfo)">
            <summary>
            Override that reads existing resources into the list
            </summary>
            <param name="reader"></param>
            <param name="baseName"></param>
            <param name="cultureInfo"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Close">
            <summary>
            Closes the resource writer after releasing any resources associated with it
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Dispose">
            <summary>
            Releases all resources used by the object
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the object
            </summary>
            <param name="disposing">True if the object is being disposed</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.Object)">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.String)">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.Byte[])">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Generate">
            <summary>
            Writes all the resources added by the AddResource method to the output file or stream
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Generate(System.Boolean)">
            <summary>
            Writes all resources out to the resource store. Optional flag that
            allows deleting all resources for a given culture and basename first
            so that you get 'clean set' of resource with no orphaned values.
            </summary>
            <param name="DeleteAllRowsFirst"></param>
        </member>
        <member name="T:Westwind.Globalization.DbResourceProviderSection">
            <summary>
            This is the resource provider section that mimics the settings stored in DbResourceConfiguration object.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceProviderSection.ResxExportProjectType">
            <summary>
            Determines whether WebForms (using App_Global/LocalResource) or plain .NET Resx files are 
            used for exporting ResX resources. Options are WebForms and Project. WebForms generates resources 
            in resource folders, Class generates ResX files in the Properties folder of the project.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceProviderSection.StronglyTypedGlobalResource">
            <summary>
            Determines whether a strongly typed resource is created when database resources are exported to a ResX file
            Specify the project relative filename (~/Properties/Resources.cs) and a namespace ("AppResources")
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceProviderSection.ResourceBaseNamespace">
            <summary>
            The base namespace used for resources imported from Resx resources
            and for generation of strongly typed resources.
            Resourcenames then add the project path to the base path
            (ie. AppResources.Properties.Resources) 
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbRes">
            <summary>
            Helper class that handles access to the DbResourceManager
            more easily with single method access. The T() method provides
            an easy way to embed resources into applications using the
            resource key.
            
            Also allows for resource reading, writing (new and updates transparently), 
            deleting and clearing of resources from memory.
            
            This class uses the DbResourceManager class to access
            resources and still uses the standard ResourceManager 
            infrastructure of .NET to cache resources efficiently
            in memory. Data access occurs only on intial access of
            each resource set/locale.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbRes.ResourceManagers">
            <summary>
            Internal dictionary that holds instances of resource managers
            for each resourceset defined in the application. Lazy loaded
            as resources are accessed.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbRes.T(System.String,System.String,System.String)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value string. Easy access that allows full
            control over the resource to retrieve or default UiCulture
            locale retrieval.
            </summary>
            <param name="resId">The Resource Id to retrieve
            Note resource Ids can be *any* string and if no
            matching resource is found the id is returned.
            </param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <returns>
            Localized resource or the resource Id if no match is found. 
            This value *always* returns a string unless you pass in null.
            </returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.TO(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value object. Use this function if you're
            retrieving non-string values - for string values just use T.
            </summary>
            <param name="resId">The Resource Id to retrieve
            Note resource Ids can be *any* string and if no
            matching resource is found the id is returned.
            </param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <param name="autoAdd">If true if a resource cannot be found a new entry is added in the invariant locale</param>
            <returns>
            The resource as an object.    
            </returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.WriteResource(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a resource either creating or updating an existing resource 
            </summary>
            <param name="resourceId">Resource Id to write. Resource Ids can be any string up to 1024 bytes in length</param>
            <param name="value">Value to set the resource to</param>
            <param name="lang">Language as ieetf code: en-US, de-DE etc. 
            Value can be left blank for Invariant/Default culture to set.
            </param>
            <param name="resourceSet">The resourceSet to store the resource on. 
            If no resource set name is provided a default empty resource set is used.</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.DeleteResource(System.String,System.String,System.String)">
            <summary>
            Deletes a resource entry
            </summary>
            <param name="resourceId">The resource to delete</param>
            <param name="lang">The language Id - Be careful:  If empty or null deletes matching keys for all languages</param>
            <param name="resourceSet">The resource set to apply</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.ClearResources">
            <summary>
            Clears resources from memory and forces reloading of all ResourceSets.
            Effectively unloads the ResourceManager and ResourceProvider.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbRes.AutoAddResources">
            <summary>
            Determines whether resources that fail in a lookup are automatically
            added to the resource table
            </summary>
        </member>
        <member name="T:Westwind.Globalization.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.Can_t_save_resource__Invalid_culture_id_passed">
            <summary>
              Looks up a localized string similar to Can&apos;t save resource: Invalid culture id passed: {0}.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.Client_Id_and_Client_Secret_must_be_provided">
            <summary>
              Looks up a localized string similar to Client Id and Client Secret must be provided..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.Client_Id_and_Client_Secret_must_be_provided_">
            <summary>
              Looks up a localized string similar to Client Id and Client Secret must be provided..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.ConnectionFailed">
            <summary>
              Looks up a localized string similar to Connection failed: .
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.ConnectionStringForResourcesIsNotConfigure">
            <summary>
              Looks up a localized string similar to Connection string for resources is not configured.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.EditPageResources">
            <summary>
              Looks up a localized string similar to Edit Page Resources.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.InvalidSearchResult">
            <summary>
              Looks up a localized string similar to Invalid search result..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.LocalizationOptions">
            <summary>
              Looks up a localized string similar to Localization Options.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.LocalizationTable_Localization_Table_exists_already">
            <summary>
              Looks up a localized string similar to Localization Table exists already.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.No_matching_Recordset_found_">
            <summary>
              Looks up a localized string similar to No matching Recordset found..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.NoResourceIdSpecifiedCantAddResource">
            <summary>
              Looks up a localized string similar to No ResourceId specified. Can&apos;t add resource.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Resources.Resources.ShowLocalizationIcons">
            <summary>
              Looks up a localized string similar to Show Localization Icons.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.JavaScriptResourceHandler">
            <summary>
            Http Handler that returns ASP.NET Local and Global Resources as JavaScript
            objects. Supports both plain Resx Resources as well as DbResourceProvider 
            driven resources.
            
            Objects are generated in the form of:
            
            &lt;&lt;code lang="JavaScript"&gt;&gt;var localRes  = {
               BackupFailed: "Backup was not completed",
               Loading: "Loading"
            );&lt;&lt;/code&gt;&gt;
            
            where the resource key becomes the property name with a string value.
            
            The handler is driven through query string variables determines which 
            resources are returned:
            
            ResourceSet      -  Examples: "resources" (global), "admin/somepage.aspx" "default.aspx" (local)
            LocaleId         -  Examples: "de-de","de",""  (empty=invariant)
            ResourceType     -  Resx,ResDb
            IncludeControls  -  if non-blank includes control values (. in name)
            VarName          -  name of hte variable generated - if omitted localRes or globalRes is created.    
            ResourceMode -  Flag required to find Resx resources on disk 0 - Local 1 - global 2 - plain resx
            
            Resources retrieved are aggregated for the locale Id (ie. de-de returns 
            de-de,de and invariant) whichever matches first.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.SerializeResourceDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Generates the actual JavaScript object map string makes up the
            handler's result content.
            </summary>
            <param name="resxDict"></param>
            <param name="varname"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.SendErrorResponse(System.String)">
            <summary>
            Returns an error response to the client. Generates a 404 error
            </summary>
            <param name="Message">Error message to display</param>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.SendTextOutput(System.String,System.String)">
            <summary>
            Writes text output to server using UTF-8 encoding and GZip encoding
            if supported by the client
            </summary>
            <param name="text"></param>
            <param name="useGZip"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.RegisterJavaScriptGlobalResources(System.Web.UI.Control,System.String,System.String,System.String,Westwind.Globalization.ResourceProviderTypes)">
            <summary>
            Inserts global resources into the current page.
            </summary>
            <param name="control">A control (typically) page needed to embed into the page</param>
            <param name="resourceSet">Name of the resourceSet to load</param>
            <param name="localeId">The Locale for which to load resources. Normalized from most specific to Invariant</param>
            <param name="varName">Name of the variable generated</param>
            <param name="resourceType">Resx or DbResourceProvider (database)</param>
            <param name="includeControls">Determines whether control ids are included</param>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.RegisterJavaScriptGlobalResources(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Embed global JavaScript resources into the page.
            
            This version returns resources of the active Resx or DB Resource Provider
            and includes no controls and creates a variable named "globalRes"
            and uses the page's current UI culture
            </summary>
            <param name="control"></param>
            <param name="resourceSet"></param>       
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.RegisterJavaScriptLocalResources(System.Web.UI.Control,System.String,System.String,System.String,Westwind.Globalization.ResourceProviderTypes,System.Boolean)">
            <summary>
            Inserts local resources into the current page.
            </summary>
            <param name="control">A control (typically) page needed to embed into the page</param>
            <param name="resourceSet">Name of the resourceSet to load</param>
            <param name="localeId">The Locale for which to load resources. Normalized from most specific to Invariant</param>
            <param name="varName">Name of the variable generated</param>
            <param name="resourceType">Resx or DbResourceProvider (database)</param>
            <param name="includeControls">Determines whether control ids are included</param>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.RegisterJavaScriptLocalResources(System.Web.UI.Control,System.String)">
            <summary>
            Embed global JavaScript resources into the page.
            
            This version returns resources of the active Resx or DB Resource Provider,
            includes no controls and uses the CurrentUICulture's locale id
            </summary>
            <param name="control">A control or page instance required to </param>
            <param name="varName">Name of the JavaScript object variable created</param>        
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.GetJavaScriptGlobalResourcesUrl(System.String,System.String,System.String,Westwind.Globalization.ResourceProviderTypes)">
            <summary>
            Returns a URL to the JavaScriptResourceHandler.axd handler that retrieves
            normalized resources for a given resource set and localeId and creates
            a JavaScript object with the name specified.
            
            This function returns only the URL - you're responsible for embedding
            the URL into the page as a script tag to actually load the resources.
            </summary>
            <param name="varName"></param>
            <param name="resourceSet"></param>
            <param name="localeId"></param>
            <param name="resourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.GetJavaScriptGlobalResourcesUrl(System.String,System.String)">
            <summary>
            Returns a URL to the JavaScriptResourceHandler.axd handler that retrieves
            normalized resources for a given resource set and localeId and creates
            a JavaScript object with the name specified.
            
            This version assumes the current UI Culture and auto-detects the
            provider type (Resx or DbRes) currently active.
            </summary>
            <param name="varName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.GetJavaScriptLocalResourcesUrl(System.String,System.String,System.String,Westwind.Globalization.ResourceProviderTypes,System.Boolean)">
            <summary>
            Inserts local resources into the current page.
            </summary>
            <param name="control">A control (typically) page needed to embed into the page</param>
            <param name="resourceSet">Name of the resourceSet to load</param>
            <param name="localeId">The Locale for which to load resources. Normalized from most specific to Invariant</param>
            <param name="varName">Name of the variable generated</param>
            <param name="resourceType">Resx or DbResourceProvider (database)</param>
            <param name="includeControls">Determines whether control ids are included</param>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.GetJavaScriptLocalResourcesUrl(System.String,System.Boolean)">
            <summary>
            Returns a URL to embed local resources into the page via JavaScriptResourceHandler.axd. 
            This method returns only a URL - you're responsible for embedding the script tag into the page
            to actually load the resources.
            
            This version assumes the local resource set for the current request/page and autodetected
            resources (resdb or resx). It also uses the CurrentUICulture as the locale.
            </summary>
            <param name="varName">The name of the JavaScript variable to create</param>        
            <param name="includeControls"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResourceHandler.GetJavaScriptResourcesUrl(System.String,System.String,System.String,Westwind.Globalization.ResourceProviderTypes)">
            <summary>
            Returns a standard Resx resource based on it's . delimited resourceset name
            </summary>
            <param name="varName">The name of the JavaScript variable to create</param>
            <param name="resourceSet">The name of the resource set
            
            Example:
            CodePasteMvc.Resources.Resources  (~/Resources/Resources.resx in CodePasteMvc project)
            </param>
            <param name="localeId">IETF locale id (2 or 4 en or en-US or empty)</param>
            <param name="resourceType">ResDb or ResX</param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.ResourceProviderTypes">
            <summary>
            Determines the resource provider type used
            to retrieve resources.
            
            Note only applies to the stock ResX provider
            or the DbResourceProviders of this assembly.
            Other custom resource providers are not supported.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.StronglyTypedWebResources">
            <summary>
            Class that handles generating strongly typed resources 
            for global Web resource files. This feature is not supported
            in ASP.NET stock projects and doesn't support custom resource
            providers in WAP.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.StronglyTypedWebResources.IsVb">
            <summary>
            Internally track File type once we've read it from the
            top level method.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassFromFromAllGlobalResXResources(System.String,System.String)">
            <summary>
            Creates a class containing strongly typed resources of all resource keys
            in all global resource ResX files. A single class file with multiple classes
            is created.
            
            The extension of the output file determines whether VB or CS is generated       
            </summary>        
            <param name="Namespace"></param>
            <param name="FileName">Output file name for the generated class. .cs and .vb generate appropriate languages</param>
            <returns>Generated class as a string</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateGlobalResxResourceDesignerFiles(System.String,Westwind.Globalization.CodeGenerationLanguage)">
            <summary>
            Creates a strongly typed resource class that uses the ASP.NET Resource Manager
            rather than using Resx .NET resources which basically results in duplicated 
            resource sets loaded. Overwrites the generated.
            </summary>
            <param name="Namespace"></param>        
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassFromAllDatabaseResources(System.String,System.String)">
            <summary>
            Creates strongly typed classes from all global resources in the current application
            from the active DbResourceManager. One class is created which contains each of the
            resource classes. Classnames are not necessarily named with
            
            Uses the default DbResourceConfiguration.Current settings for connecting
            to the database.
            </summary>
            <param name="Namespace">Optional namespace for the generated file</param>
            <param name="FileName">Output class file. .cs or .vb determines code language</param>
            <returns>Generated class as a string</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassFromResXResource(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an ASP.NET compatible strongly typed resource from a ResX file in ASP.NET.
            The class generated works only for Global Resources by calling GetGlobalResourceObject.
            
            This routine parses the raw ResX files since you can't easily get access to the active
            ResourceManager in an ASP.NET application since the assembly is dynamically named and not
            easily accessible.
            </summary>
            <param name="ResourceSetFileName"></param>
            <param name="Namespace"></param>
            <param name="FileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassFromDatabaseResource(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a strongly typed resource class for a ResoureSet from the DbResourceManager.
            
            Note: Uses the default ResourceProvider settings as set in the DbResourceConfiguration.Current 
            property for opening the database and otherwise setting values.
            </summary>
            <param name="ResourceSetName">The name of the resource set. Should be a GLOBAL resource</param>
            <param name="Namespace">The namespace for the generated class. Null or string.Empty to not generate a namespace</param>
            <param name="Classname">Name of the class to be generated</param>
            <param name="FileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns>string of the generated class</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassFromResourceSet(System.Resources.ResourceSet,System.String,System.String,System.String)">
            <summary>
            Creates a strongly typed resource from a ResourceSet object. The ResourceSet passed should always
            be the invariant resourceset that contains all the ResourceIds.
            
            Creates strongly typed keys for each of the keys/values.
            </summary>
            <param name="resourceSet"></param>
            <param name="Namespace">Namespace of the generated class. Pass Null or string.Empty to not generate a namespace</param>
            <param name="classname">Name of the class to generate. Pass null to use the ResourceSet name</param>
            <param name="fileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateClassHeader(System.String,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Creates the class header for a page
            </summary>
            <param name="Classname"></param>
            <param name="IsVb"></param>
            <param name="sbClass"></param>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.CreateNameSpaceWrapper(System.String,System.Boolean,System.String)">
            <summary>
            Wraps the body of a class (or multiple classes) into a namespace
            and adds teh appropriate using/imports statements. If no namespace is
            passed the using/imports are still added, but no namespace is assigned
            </summary>
            <param name="Namespace"></param>
            <param name="IsVb"></param>
            <param name="Class"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedWebResources.IsFileVb(System.String)">
            <summary>
            Checks to see if the file extension is .vb and if so 
            returns true
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.StronglyTypedWebResources.WebPhysicalPath">
            <summary>
            The physical path for the Web application
            </summary>
        </member>
        <member name="P:Westwind.Globalization.StronglyTypedWebResources.ErrorMessage">
            <summary>
            An error message set on a failure result
            </summary>
        </member>
        <member name="T:Westwind.Globalization.TranslationServices">
            <summary>
            Provides basic translation features via several Web interfaces
            
            NOTE: These services may change their format or otherwise fail.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.TranslateGoogle(System.String,System.String,System.String)">
            <summary>
            Translates a string into another language using Google's translate API JSON calls.
            <seealso>Class TranslationServices</seealso>
            </summary>
            <param name="Text">Text to translate. Should be a single word or sentence.</param>
            <param name="FromCulture">
            Two letter culture (en of en-us, fr of fr-ca, de of de-ch)
            </param>
            <param name="ToCulture">
            Two letter culture (as for FromCulture)
            </param>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.TranslateBing(System.String,System.String,System.String,System.String)">
            <summary>
            Uses the Bing API service to perform translation
            Bing can translate up to 1000 characters. 
            
            Requires that you provide a CLientId and ClientSecret
            or set the configuration values for these two.
            
            More info on setup:
            http://weblog.west-wind.com/posts/2013/Jun/06/Setting-up-and-using-Bing-Translate-API-Service-for-Machine-Translation
            </summary>
            <param name="text">Text to translate</param>
            <param name="fromCulture">Two letter culture name</param>
            <param name="toCulture">Two letter culture name</param>
            <param name="accessToken">Pass an access token retrieved with GetBingAuthToken.
            If not passed the default keys from .config file are used if any</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.GetBingAuthToken(System.String,System.String)">
            <summary>
            Retrieves an oAuth authentication token to be used on the translate
            API request. The result string needs to be passed as a bearer token
            to the translate API.
            
            You can find client ID and Secret (or register a new one) at:
            https://datamarket.azure.com/developer/applications/
            </summary>
            <param name="clientId">The client ID of your application</param>
            <param name="clientSecret">The client secret or password</param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.TranslationServices.ErrorMessage">
            <summary>
            Error message set when an error occurs in the translation service
            </summary>
        </member>
        <member name="P:Westwind.Globalization.TranslationServices.TimeoutSeconds">
            <summary>
            Timeout for how long to wait for a translation
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbDesignTimeResourceProviderFactory">
            <remarks>
            Design-time resource provider to provide Generate Local Resources functionality.
            </remarks>
        </member>
        <member name="T:Westwind.Globalization.DbDesignTimeResourceProviderFactory.DesignTimeGlobalResourceProvider">
            <remarks>
            Design-time resource provider for global resources.
            </remarks>
        </member>
        <member name="T:Westwind.Globalization.DbDesignTimeResourceProviderFactory.DbDesignTimeLocalResourceProvider">
            <remarks>
            Design-time resource provider and writer for local resources.
            </remarks>
        </member>
        <member name="M:Westwind.Globalization.DbDesignTimeResourceProviderFactory.DbDesignTimeLocalResourceProvider.GetFullPagePath">
            <summary>
            RAS Modified to read values from configiuration section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbDesignTimeResourceProviderFactory.ResourceDictionary.Westwind#Globalization#DbDesignTimeResourceProviderFactory#IResourceDictionary#CreateResourceKey(System.Object)">
            <summary>
            Creates a new ResourceKey value. By default uses the
            name of the control plus an incrementor.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbDesignTimeResourceProviderFactory.ResourceDictionary.CreateKey(System.String)">
            <summary>
            Creates a string name key for a given meta:Resource attribute.
            The key is the name of hte property with a 1,2,3 postfix if there's duplication
            
            NOTE: This is slightly different than the default behavior which will always
            use a post fix value. This version only creates a postfix if there's dupes.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbDesignTimeResourceProviderFactory.ResourceDictionary.IsUsedKey(System.String)">
            <summary>
            Checks to see if a resource key already exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.GlobalizationResources">
            <summary>
            Class is used as to consolidate access to resources
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResXConverter">
            <summary>
            This class can be used to export resources from the database to ASP.NET
            compatible resources (Resx). This class takes all the resources in 
            the database and creates RESX files that match these resources.
            
            Please note that it will overrwrite any existing resource files
            if they already exist, so please use this class with care if
            you have existing ResX resources.
            
            Note this class is primarily ASP.NET specific in that it looks at
            ASP.NET specific directory structures for ResX imports and strongly
            typed resource creation.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.#ctor">
            <summary>
            Creates new instance with the default Web Application
            base path set to the current Web application's path.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.#ctor(System.String)">
            <summary>
            Pass in the base phyiscal path for the project. 
            
            For Web Projects this will be the Web root dir for
            non-Web projects this will be the project base path 
            as a string.
            </summary>
            <param name="basePhsyicalPath"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateLocalWebResourceResXFiles">
            <summary>
            Genereates Local Web Resource ResX files from the DbResourceDataManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateGlobalWebResourceResXFiles">
            <summary>
            Genereates Local Web Resource ResX files from the DbResourceDataManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateWebResourceResXFiles(System.Boolean)">
            <summary>
            Dumps resources from the DbResourceProvider database
            out to Resx resources in an ASP.NET application
            creating the appropriate APP_LOCAL_RESOURCES/APP_GLOBAL_RESOURCES
            folders and resx files.
            IMPORTANT: will overwrite existing files
            </summary>
            <param name="localResources"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateResXFiles">
            <summary>
            Generates Resx Files for standard non-Web Resource files        
            based on the BasePhysicalPath
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.FormatWebResourceSetPath(System.String,System.Boolean)">
            <summary>
            Translates the resource set path ASP.NET WebForms Global 
            or local resource path base (ie. without the .resx and localeId extension).
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.IsLocalResourceSet(System.String)">
            <summary>
            Determines if a resourceset is a local resource based
            on the extension of the resource set
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.FormatResourceSetPath(System.String)">
            <summary>
            Returns the path the resource file withouth the resx and localeId extension
            </summary>
            <param name="resourceSet"></param>
            <param name="LocalResources"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportWebResources">
            <summary>
            Imports ResX Web Resources of a Web application by parsing through
            the App_GlobalResources and App_LocalResources directories of 
            a Web site.
            
            Note: Requires that WebPhysicalPath is set to point at the 
            Web root directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportWebResources(System.String)">
            <summary>
            Internal worker method that parses through the directories
            </summary>
            <param name="WebPath">Physical path of the directory to pars</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportWinResources(System.String)">
            <summary>
            Imports Resources recursively from a non-Web project
            </summary>
            <param name="basePhysicalPath">The physical path to the directory</param>
            <param name="baseNamespace">The base namespace in the project to prefix InternalResourceSets with</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportDirectoryResources(System.String,System.String)">
            <summary>
            Imports all resources from a given directory. This method works for any resources.
            
            When using LocalResources, make sure to provide an app relative path as the second
            parameter if the resources live in non root folder. So if you have resources in off
            an Admin folder use "admin/" as the parameter. Otherwise for web root resources or
            global or assembly level assemblies pass string.Empty or null.   
            </summary>
            <param name="path">Physical Path for the Resources</param>
            <param name="relativePath">Optional - relative path prefix for Web App_LocalResources (ie. admin/)</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportResourceFile(System.String,System.String,System.String)">
            <summary>
            Imports an individual ResX Resource file into the database
            </summary>
            <param name="FileName">Full path to the the ResX file</param>
            <param name="ResourceSetName">Name of the file or for local resources the app relative path plus filename (admin/default.aspx or default.aspx)</param>
            <param name="LocaleId">Locale Id of the file to import. Use "" for Invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GetResXResources(System.String)">
            <summary>
            Gets a specific List of resources as a list of ResxItems.
            This list only retrieves items for a specific locale. No
            resource normalization occurs.
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GetResXResourcesNormalizedForLocale(System.String,System.String)">
            <summary>
            Returns all resources for a given locale normalized down the hierarchy for 
            a given resource file. The resource file should be specified without the
            .resx and locale identifier extensions.
            </summary>
            <param name="baseFile">The base Resource file without .resx and locale extensions</param>
            <param name="LocaleId"></param>
            <returns>Dictionary of resource keys and values</returns>
        </member>
        <member name="P:Westwind.Globalization.DbResXConverter.BasePhysicalPath">
            <summary>
            The physical path of the Web application. This path serves as 
            the root path to write resources to.
            
            Example: c:\projects\MyWebApp
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResXConverter.ErrorMessage">
            <summary>
            Error message if an operation fails
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceConfiguration">
            <summary>
            The configuration class that is used to configure the Resource Provider.
            This class contains various configuration settings that the provider requires
            to operate both at design time and runtime.
            
            The application uses the static Current property to access the actual
            configuration settings object. By default it reads the configuration settings
            from web.config (at runtime). You can override this behavior by creating your
            own configuration object and assigning it to the DbResourceConfiguration.Current property.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.Current">
            <summary>
            A global instance of the current configuration. By default this instance reads its
            configuration values from web.config at runtime, but it can be overridden to
            assign specific values or completely replace this object. 
            
            NOTE: Any assignment made to this property should be made at Application_Start
            or other 'application initialization' event so that these settings are applied
            BEFORE the resource provider is used for the first time.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.#cctor">
            <summary>
            Static constructor for the Current property - guarantees this
            code fires exactly once giving us a singleton instance
            of the configuration object.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.#ctor">
            <summary>
            Base constructor that doesn't do anything to the default values.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.#ctor(System.Boolean)">
            <summary>
            Default constructor used to read the configuration section to retrieve its values
            on startup.
            </summary>
            <param name="readConfigurationSection"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.ReadConfigurationSection">
            <summary>
            Reads the DbResourceProvider Configuration Section and assigns the values 
            to the properties of this class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.ReadDesignTimeConfiguration(System.IServiceProvider)">
            <summary>
            Handle design time access to the configuration settings - used for the 
            DbDesignTimeResourceProvider - when loaded we re-read the settings
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.ReadSectionValues(Westwind.Globalization.DbResourceProviderSection)">
            <summary>
            Reads the actual section values
            </summary>
            <param name="section"></param>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.LoadedProviders">
            <summary>
            Keep track of loaded providers so we can unload them
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.ClearResourceCache">
            <summary>
            This static method clears all resources from the loaded Resource Providers 
            and forces them to be reloaded the next time they are requested.
            
            Use this method after you've edited resources in the database and you want 
            to refresh the UI to show the newly changed values.
            
            This method works by internally tracking all the loaded ResourceProvider 
            instances and calling the IwwResourceProvider.ClearResourceCache() method 
            on each of the provider instances. This method is called by the Resource 
            Administration form when you explicitly click the Reload Resources button.
            <seealso>Class DbResourceConfiguration</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ConnectionString">
            <summary>
            Database connection string to the resource data.
            
            The string can either be a full connection string or an entry in the 
            ConnectionStrings section of web.config.
            <seealso>Class DbResource
            Compiling Your Applications with the Provider</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResourceTableName">
            <summary>
            Database table name used in the database
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.DesignTimeVirtualPath">
            <summary>
            The virtual path for the Web application. This value is used at design time for WebForms implicit resource import from Visual Studio.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ShowLocalizationControlOptions">
            <summary>
            Determines whether the DbResourceControl shows its localization options on the
            page. 
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ShowControlIcons">
            <summary>
            Determines whether page controls show icons when a 
            DbResourceControl is active. Note requires that ShowLocalizationControlOptions
            is true as well.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.DbResourceManagerType">
            <summary>
            Type that is instantiated to handle Database access
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.LocalizationFormWebPath">
            <summary>
            Determines the location of the Localization form in a Web relative path.
            This form is popped up when clicking on Edit Resources in the 
            DbResourceControl
            </summary>        
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.AddMissingResources">
            <summary>
            Determines whether any resources that are not found are automatically
            added to the resource file.
            
            Note only applies to the Invariant culture.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.BingClientId">
            <summary>
            API key for Bing Translate API in the 
            Administration API.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.BingClientSecret">
            <summary>
            Bing Secret Key for Bing Translate API Access
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.UseVsNetResourceNaming">
            <summary>
            Determines whether generated Resource names use the same syntax
            as VS.Net uses. Defaults to false, which uses simple control
            name syntax (no ResourceX value) if possible. The dfeault value
            is shown without a number and numbers are only used on duplication.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.StronglyTypedGlobalResource">
            <summary>
            Path of an optionally generated strongly typed resource
            which is created when exporting to ResX resources.
            
            Leave this value blank if you don't want a strongly typed resource class
            generated for you.
            
            Otherwise format is: 
            ~/App_Code/Resources.cs
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResourceBaseNamespace">
            <summary>
            The namespace used for exporting and importing resources 
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResxExportProjectType">
            <summary>
            Determines how what type of project we are working with
            </summary>
        </member>
        <member name="T:Westwind.Globalization.GlobalizationResxExportProjectTypes">
            <summary>
            Project types for Resx Exports. Either WebForms using 
            local and global resources files, or project
            </summary>
        </member>
        <member name="F:Westwind.Globalization.GlobalizationResxExportProjectTypes.WebForms">
            <summary>
            WebForms project that use App_LocalResource/App_GlobalResources
            to store local and global resources
            </summary>
        </member>
        <member name="F:Westwind.Globalization.GlobalizationResxExportProjectTypes.Project">
            <summary>
            Any .NET project other than WebForms that 
            uses a single directory (Properties) for 
             Resx resources
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceControl">
            <summary>
            The DbResourceControl class provides Page level Resource Administration
            support to localizable ASP.NET pages. This control allows bringing up
            the localization Administration Form that shows all localizable resources
            for editing and translation.
            
            The control also provides the ability to show icons next to each control
            to jump directly to the appropriate control in the Admin form. The control
            can automatically detect Page, Control, Master Page (any template control)
            resources and jump directly to the appropriate resource entry if it exists.
            
            Note the control shows all Localizable controls, but there's no guarantee
            that the controls are actually hooked up for localization in the ASP.NET
            page, control, master etc. resource. You need to ensure either implicit
            or explicit resources are actually configured on the pages.
            
            For the control to work it merely should be placed on any form that is
            localizable. Display of the control is globally controlled via the 
            DbResourceConfiguration object (and the DbResourceConfigurationSection in
            Web.config by default) which allows toggling display of the control in the UI
            and toggling the display of the individual resource icons.
            
            The Administration form relies on the availability of the Administration
            form (LocalizeForm.aspx) and a configuration entry that points at this
            control. This form must be distributed with your Web application.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.#ctor">
            <summary>
            The default control constructor.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.OnEditResources(System.Object,System.EventArgs)">
            <summary>
            Event handler that is called and can be hooked when the Edit Resources
            option is clicked. This interface brings up the Administration form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.OnShowIcons(System.Object,System.EventArgs)">
            <summary>
            Event handler that is called when the Show Icons checkbox is
            checked or unchecked. The default behavior sets the current
            DbResourceConfiguration.ShowControlIcons setting which 
            is global.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.AddResourceToResourceFile(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Generates the Database resources for a given form
            </summary>
            <param name="ParentControl"></param>
            <param name="ResourcePrefix"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.GetAllLocalizableControls(System.Web.UI.Control)">
            <summary>
            Goes through the form and returns a list of all control on a form
            that are marked as [Localizable]
            </summary>
            <param name="control">Base container to start the parsing from. Usually this will be the current form but could be a control.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.GetAllLocalizableControls(System.Web.UI.Control,System.Collections.Generic.List{Westwind.Globalization.LocalizableProperty})">
            <summary>
            Goes through the form and returns a list of all control on a form
            that are marked as [Localizable]
            
            This internal method does all the work and drills into child containers
            recursively.
            </summary>
            <param name="control"></param>
            <param name="ResourceList"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.GetAllLocalizableControls(System.Web.UI.Control,System.Collections.Generic.List{Westwind.Globalization.LocalizableProperty},System.Boolean)">
            <summary>
            Goes through the form and returns a list of all control on a form
            that are marked as [Localizable]
            
            This internal method does all the work and drills into child containers
            recursively.
            </summary>
            <param name="control">The control at which to start parsing usually Page</param>
            <param name="ResourceList">An instance of the resource list. Pass null to create</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.GetNonLocalizableControlProperties(System.Web.UI.Control,System.Collections.Generic.List{Westwind.Globalization.LocalizableProperty})">
            <summary>
            This method is used to override special controls that don't
            have LocalizableProperties but in fact should have them by
            explicitly marking certain properties as overridable.
            </summary>
            <param name="control">The control </param>
            <param name="ResourceList"></param>        
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.AddLocalizationIcons(System.Web.UI.Control,System.Boolean)">
            <summary>
            This method is responsible for showing localization icons next to every control
            that has localizable properties.
            
            The icons are resource based and also display the control's ID. Note icons are
            placed only next to any controls that are marked as [Localizable]. Some contained
            controls like GridVIew/DataGrid Columns are not marked as [Localizable] yet
            the ASP.NET designer creates implicit resources for them anyway - these controls
            will not show icons.
            </summary>
            <param name="control"></param>
            <param name="TopLevel"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceControl.AddIconScriptFunctions">
            <summary>
            Internal method to add the page level script routines
            that are used to inject the icons next to controls. These routines
            inject HTML into the DOM rather than adding controls in order
            to avoid problems with Controls.Add() and ASP.NET script expressions.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceControl.ShowIconsInitially">
            <summary>
             Determines the initial state of the ShowLocalization Icons Text box.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceControl.ClientOnLocalizationIconHandler">
            <summary>
            Optional override for Client OnLocalization Handler that when set is fired
            in response to a click on one of the localization icons. Gets passed
            an event object plus the resource name and resource set name.
            
            If set OnLocalization is called first which in turn fires the handler
            of your choice.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.LocalizableProperty">
            <summary>
            simple object that holds the value structure of each
            saved resource item on a form
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceControlDesigner">
            <summary>
            Control designer used so we get a grey button display instead of the 
            default label display for the control.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceDataManager">
            <summary>
            This class provides the Data Access to the database
            for the DbResourceManager, Provider and design time
            services. This class acts as a Business layer
            and uses the SqlDataAccess DAL for its data access.
            
            Dependencies:
            DbResourceConfiguration   (holds and reads all config data from .Current)
            SqlDataAccess             (provides a data access (DAL))
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceDataManager.Transaction">
            <summary>
            Internally used Transaction object
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.#ctor">
            <summary>
            Default constructor. Instantiates with the default connection string
            which is loaded from the configuration section.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceSet(System.String,System.String)">
            <summary>
            Returns a specific set of resources for a given culture and 'resource set' which
            in this case is just the virtual directory and culture.
            </summary>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceSetNormalizedForLocaleId(System.String,System.String)">
            <summary>
            Returns a fully normalized list of resources that contains the most specific
            locale version for the culture provided.
                            
            This means that this routine walks the resource hierarchy and returns
            the most specific value in this order: de-ch, de, invariant.
            </summary>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.LoadFileResource(System.Data.IDataReader)">
            <summary>
            Internal method used to parse the data in the database into a 'real' value.
            
            Value field hold filename and type string
            TextFile,BinFile hold the actual file content
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResources(System.Boolean)">
            <summary>
            Returns a data table of all the resources for all locales. The result is in a 
            table called TResources that contains all fields of the table. The table is
            ordered by LocaleId.
            
            This version returns either local or global resources in a Web app
            
            Fields:
            ResourceId,Value,LocaleId,ResourceSet,Type
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResources">
            <summary>
            Returns a data table of all the resources for all locales. The result is in a 
            table called TResources that contains all fields of the table. The table is
            ordered by LocaleId.
            
            This version returns ALL resources
            
            Fields:
            ResourceId,Value,LocaleId,ResourceSet,Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceIds(System.String)">
            <summary>
            Returns all available resource ids for a given resource set in all languages.
            
            Returns a DataTable called TResoureIds with ResourecId and HasValue fields
            HasValue returns whether there are any entries in any culture for this
            resourceId
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceIdsForHtmlDisplay(System.String)">
            <summary>
            Returns an DataTable called TResourceIds with ResourceId and HasValues fields
            where the ResourceId is formatted for HTML display.
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceSets(Westwind.Globalization.ResourceListingTypes)">
            <summary>
            Returns all available resource sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllLocaleIds(System.String)">
            <summary>
            Gets all the locales for a specific resource set.
            
            Returns a table named TLocaleIds (LocaleId field)
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourcesForCulture(System.String,System.String)">
            <summary>
            Gets all the Resourecs and ResourceIds for a given resource set and Locale
            
            returns a table "TResource" ResourceId, Value fields
            </summary>
            <param name="resourceSet"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceString(System.String,System.String,System.String)">
            <summary>
            Returns an individual Resource String from the database
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>       
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceItem(System.String,System.String,System.String)">
            <summary>
            Returns a resource item that returns both the Value and Comment to the
            fields to the client.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceStrings(System.String,System.String)">
            <summary>
            Returns all the resource strings for all cultures.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceObject(System.String,System.String,System.String)">
            <summary>
            Returns an object from the Resources. Use this for any non-string
            types. While this method can be used with strings GetREsourceString
            is much more efficient.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateOrAdd(System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateOrAdd(System.String,System.Object,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.AddResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a resource to the Localization Table
            </summary>
            <param name="resourceId">The resource key name</param>
            <param name="value">Value to set it to. Can also be a file which is loaded as binary data when valueIsFileName is true</param>
            <param name="cultureName">name of the culture or null for invariant/default</param>
            <param name="resourceSet">The ResourceSet to which the resource id is added</param>
            <param name="comment">Optional comment for the key</param>
            <param name="valueIsFileName">if true the Value property is a filename to import</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Westwind.Globalization.DbResourceDataManager.UpdateResource(System.String,System.Object,System.String,System.String,System.String)" -->
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates an existing resource in the Localization table
            </summary>
            <param name="ResourceId"></param>
            <param name="Value"></param>
            <param name="CultureName"></param>
            <param name="ResourceSet"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetFileInfo(System.String)">
            <summary>
            Internal routine that looks at a file and based on its
            extension determines how that file needs to be stored in the
            database. Returns FileInfoFormat structure
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.DeleteResource(System.String,System.String,System.String)">
            <summary>
            Deletes a specific resource ID based on ResourceId, ResourceSet and Culture.
            If an empty culture is passed the entire group is removed (ie. all locales).
            </summary>
            <param name="resourceId">Resource Id to delete</param>
            <param name="cultureName">language ID - if empty all languages are deleted</param>e
            <param name="resourceSet">The resource set to remove</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResource(System.String,System.String,System.String)">
            <summary>
            Renames a given resource in a resource set. Note all languages will be renamed
            </summary>
            <param name="ResourceId"></param>
            <param name="NewResourceId"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResourceProperty(System.String,System.String,System.String)">
            <summary>
            Renames all property keys for a given property prefix. So this routine updates
            lblName.Text, lblName.ToolTip to lblName2.Text, lblName2.ToolTip if the property
            is changed from lblName to lblName2.
            </summary>
            <param name="Property"></param>
            <param name="NewProperty"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.DeleteResourceSet(System.String)">
            <summary>
            Deletes an entire resource set from the database. Careful with this function!
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResourceSet(System.String,System.String)">
            <summary>
            Renames a resource set. Useful if you need to move a local page resource set
            to a new page. ResourceSet naming for local resources is application relative page path:
            
            test.aspx
            subdir/test.aspx
            
            Global resources have a simple name
            </summary>
            <param name="OldResourceSet">Name of the existing resource set</param>
            <param name="NewResourceSet">Name to set the resourceset name to</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.ResourceExists(System.String,System.String,System.String)">
            <summary>
            Checks to see if a resource exists in the resource store
            </summary>
            <param name="ResourceId"></param>
            <param name="Value"></param>
            <param name="CultureName"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.IsValidCulture(System.String)">
            <summary>
            Returns true or false depending on whether the two letter country code exists
            </summary>
            <param name="IetfTag">two or four letter IETF tag (examples: de, de-DE,fr,fr-CA)</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GenerateResources(System.Collections.IDictionary,System.String,System.String,System.Boolean)">
            <summary>
            Persists resources to the database - first wipes out all resources, then writes them back in
            from the ResourceSet
            </summary>
            <param name="ResourceList"></param>
            <param name="CultureName"></param>
            <param name="BaseName"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourcesAsJavascriptObject(System.String,System.String,System.String)">
            <summary>
            Creates an global JavaScript object object that holds all non-control 
            local string resources as property values.
            
            All resources are returned in normalized fashion from most specifc
            to more generic (de-ch,de,invariant depending on availability)
            </summary>
            <param name="javaScriptVarName">Name of the JS object variable to createBackupTable</param>
            <param name="ResourceSet">ResourceSet name. Pass NULL for locale Resources</param>
            <param name="LocaleId"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.EmbedResourcesAsJavascriptObject(System.String,System.String,System.Web.UI.Page)">
            <summary>
            Creates an global JavaScript object object that holds all non-control 
            local string resources as property values and embeds this object
            directly into an ASP.NET page.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.IsLocalizationTable(System.String)">
            <summary>
            Checks to see if the LocalizationTable exists
            </summary>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateBackupTable(System.String)">
            <summary>
            Create a backup of the localization database.
            
            Note the table used is the one specified in the DbResourceConfiguration.Current.ResourceTableName
            </summary>
            <param name="BackupTableName">Table of the backup table. Null creates a _Backup table.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RestoreBackupTable(System.String)">
            <summary>
            Restores the localization table from a backup table by first wiping out 
            </summary>
            <param name="backupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateLocalizationTable(System.String)">
            <summary>
            Creates the Localization table on the current connection string for
            the provider.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.DbResourceDataManager.ErrorMessage">
            <summary>
            Error message that can be checked after a method complets
            and returns a failure result.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceDataManager.FileInfoFormat">
            <summary>
            Internal structure that contains format information about a file
            resource. Used internally to figure out how to write 
            a resource into the database
            </summary>
        </member>
        <member name="T:Westwind.Globalization.ResourceListingTypes">
            <summary>
            Determines how hte GetAllResourceSets method returns its data
            </summary>
        </member>
        <member name="T:Westwind.Globalization.ResourceItem">
            <summary>
            Returns a resource item that contains both Value and Comment
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.ResourceId">
            <summary>
            The Id of the resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.Value">
            <summary>
            The value of this resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.Comment">
            <summary>
            The optional comment for this resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.LocaleId">
            <summary>
            The localeId ("" invariant or "en-US", "de" etc). Note
            Empty means invariant or default locale.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.ResourceSet">
            <summary>
            The resource set (file) that this resource belongs to
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceManager">
            <summary>
            This class provides a databased implementation of a ResourceManager.
            
            A ResourceManager holds each of the InternalResourceSets for a given group
            of resources. In ResX files a group is a file group wiht the same name
            (ie. Resources.resx, Resources.en.resx, Resources.de.resx). In this
            database driven provider the group is determined by the ResourceSet
            and the LocaleId as stored in the database. This class is instantiated
            and gets passed both of these values for identity.
            
            An application can have many ResourceManagers - one for each localized
            page and one for each global resource with each hold multiple resourcesets
            for each of the locale's that are part of that resourceSet.
            
            This class implements only the GetInternalResourceSet method to
            provide the ResourceSet from a database. It also implements all the
            base class constructors and captures only the BaseName which 
            is the name of the ResourceSet (ie. a global or local resource group)
            
            Dependencies:
            DbResourceDataManager for data access
            DbResourceConfiguration which holds and reads config settings
            
            DbResourceSet
            DbResourceReader
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceManager.SyncLock">
            <summary>
            Critical Section lock used for loading/adding resource sets
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.#ctor(System.String)">
            <summary> 
            Constructs a DbResourceManager object
            </summary>
            <param name="baseName">The qualified base name which the resources represent</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.#ctor(System.Type)">
            <summary>
            Constructs a DbResourceManager object. Match base constructors.
            </summary>
            <param name="resourceType">The Type for which resources should be read/written</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.Initialize(System.String,System.Reflection.Assembly)">
            <summary>
            Core Configuration method that sets up the ResourceManager. For this 
            implementation we only need the baseName which is the ResourceSet id
            (ie. the local or global resource set name) and the assembly name is
            simply ignored.
            
            This method essentially sets up the ResourceManager and holds all
            of the culture specific resource sets for a single ResourceSet. With
            ResX files each set is a file - in the database a ResourceSet is a group
            with the same ResourceSet Id.
            </summary>
            <param name="ConnectionString"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            This is the only method that needs to be overridden as long as we
            provide implementations for the ResourceSet/ResourceReader/ResourceWriter
            </summary>
            <param name="culture"></param>
            <param name="createIfNotExists"></param>
            <param name="tryParents"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.ReleaseAllResources">
            <summary>
            Clears all resource sets and forces reloading
            on next resource set retrieval. Effectively
            this refreshes resources if the source has
            changed. Required to see DB changes in the
            live UI.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.GetObject(System.String)">
            <summary>
            Core worker method on the manager that returns resource. This
            override returns the resource for the currently active UICulture
            for this manager/resource set.
            
            If resource is not found it returns null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core worker method that returns a  resource value for a
            given culture from the this resourcemanager/resourceset.
            
            If resource is not found it returns the null
            </summary>
            <param name="name"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.AddMissingResource(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Add a new resource to the base resource set
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Westwind.Globalization.DbResourceManager.AutoAddMissingEntries">
            <summary>
            If true causes any entries that aren't found to be added
            </summary>
        </member>
        <member name="T:Westwind.Globalization.IWestWindResourceProvider">
            <summary>
            Resource Provider marker interface. Also provides for clearing resources.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.IWestWindResourceProvider.ClearResourceCache">
            <summary>
            Interface method used to force providers to register themselves
            with DbResourceConfiguration.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceProvider">
            <summary>
            The DbResourceProvider class is an ASP.NET Resource Provider implementation
            that retrieves its resources from a database. It works in conjunction with a
            DbResourceManager object and so uses standard .NET Resource mechanisms to 
            retrieve its data. The provider should be fairly efficient and other than
            initial load time standard .NET resource caching is used to hold resource sets
            in memory.
            
            The Resource Provider class provides the base interface for accessing resources.
            This provider interface handles loading resources, caching them (using standard
            Resource Manager functionality) and allowing access to resources via GetObject.
            
            This provider supports global and local resources, explicit expressions
            as well as implicit expressions (IImplicitResourceProvider).
            
            There's also a design time implementation to provide Generate LocalResources
            support from ASP.NET Web Form designer.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceProvider._className">
            <summary>
            
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceProvider.ProviderLoaded">
            <summary>
            Flag that can be read to see if the resource provider is loaded
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.#ctor(System.String,System.String)">
            <summary>
            Default constructor - only captures the parameter values
            </summary>
            <param name="virtualPath"></param>
            <param name="classname"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.ClearResourceCache">
            <summary>
            Releases all resources and forces resources to be reloaded
            from storage on the next GetResourceSet
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.System#Web#Compilation#IResourceProvider#GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            The main method to retrieve a specific resource key. The provider
            internally handles resource fallback based on the ResourceSet implementation.
            </summary>
            <param name="resourceKey"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.System#Web#Compilation#IImplicitResourceProvider#GetObject(System.Web.Compilation.ImplicitResourceKey,System.Globalization.CultureInfo)">
            <summary>
            Implicit ResourceKey GetMethod that is called off meta:Resource key values.
            Note that if a value is missing at compile time this method is never called
            at runtime as the key isn't added to the Implicit key dictionary
            </summary>
            <param name="implicitKey"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.ConstructFullKey(System.Web.Compilation.ImplicitResourceKey)">
            <summary>
            Routine that generates a full resource key string from
            an Implicit Resource Key value
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceProvider.System#Web#Compilation#IImplicitResourceProvider#GetImplicitResourceKeys(System.String)">
            <summary>
            Retrieves all keys for from the resource store that match the given key prefix.
            The value here is generally a property name (or resourceId) and this routine
            retrieves all matching property values.
            
            So, lnkSubmit as the prefix finds lnkSubmit.Text, lnkSubmit.ToolTip and
            returns both of those keys.
            </summary>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.DbResourceProvider.ResourceManager">
            <summary>
            IResourceProvider interface - required to provide an instance to an
            ResourceManager object.
            
            Note that the resource manager is not tied to a specific culture by
            default. The Provider uses the UiCulture without explicitly passing
            culture info.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceProvider.ResourceReader">
            <summary>
            Required instance of the ResourceReader for this provider. Part of
            the IResourceProvider interface. The reader is responsible for feeding
            the Resource data from a ResourceSet. The interface basically walks
            an enumerable interface by ResourceId.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbSimpleResourceProvider">
            <summary>
            Implementation of a very simple database Resource Provider. This implementation
            is self contained and doesn't use a custom ResourceManager. Instead it
            talks directly to the data resoure business layer (DbResourceDataManager).
            
            Dependencies:
            DbResourceDataManager
            DbResourceConfiguration
            
            You can replace those depencies (marked below in code) with your own data access
            management. The two dependcies manage all data access as well as configuration 
            management via web.config configuration section. It's easy to remove these
            and instead use custom data access code of your choice.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbSimpleResourceProvider._ResourceSetName">
            <summary>
            Keep track of the 'className' passed by ASP.NET
            which is the ResourceSetId in the database.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbSimpleResourceProvider._resourceCache">
            <summary>
            Cache for each culture of this ResourceSet. Once
            loaded we just cache the resources.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbSimpleResourceProvider._SyncLock">
            <summary>
            Critical section for loading Resource Cache safely
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProvider.GetResourceCache(System.String)">
            <summary>
            Manages caching of the Resource Sets. Once loaded the values are loaded from the 
            cache only.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProvider.ClearResourceCache">
            <summary>
            Clears out the resource cache which forces all resources to be reloaded from
            the database.
            
            This is never actually called as far as I can tell
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProvider.System#Web#Compilation#IResourceProvider#GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            The main worker method that retrieves a resource key for a given culture
            from a ResourceSet.
            </summary>
            <param name="resourceKey"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProvider.GetObjectInternal(System.String,System.String)">
            <summary>
            Internal lookup method that handles retrieving a resource
            by its resource id and culture. Realistically this method
            is always called with the culture being null or empty
            but the routine handles resource fallback in case the
            code is manually called.
            </summary>
            <param name="resourceKey"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.DbSimpleResourceProvider.ResourceReader">
            <summary>
            The Resource Reader is used parse over the resource collection
            that the ResourceSet contains. It's basically an IEnumarable interface
            implementation and it's what's used to retrieve the actual keys
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbSimpleResourceProviderFactory">
            <summary>
            Provider factory that instantiates the individual provider. The provider
            passes a 'classname' which is the ResourceSet id or how a resource is identified.
            For global resources it's the name of hte resource file, for local resources
            it's the full Web relative virtual path
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProviderFactory.CreateGlobalResourceProvider(System.String)">
            <summary>
            ASP.NET sets up provides the global resource name which is the 
            resource ResX file (without any extensions). This will become
            our ResourceSet id. ie. Resource.resx becomes "Resources"
            </summary>
            <param name="classname"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbSimpleResourceProviderFactory.CreateLocalResourceProvider(System.String)">
            <summary>
            ASP.NET passes the full page virtual path (/MyApp/subdir/test.aspx) wich is
            the effective ResourceSet id. We'll store only an application relative path
            (subdir/test.aspx) by stripping off the base path.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbSimpleResourceReader">
            <summary>
            Required simple IResourceReader implementation. A ResourceReader
            is little more than an Enumeration interface that allows 
            parsing through the Resources in a Resource Set which
            is passed in the constructor.
            </summary>
        </member>
    </members>
</doc>
